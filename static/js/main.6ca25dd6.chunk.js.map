{"version":3,"sources":["CurrencyInput.js","App.js","serviceWorker.js","index.js"],"names":["defaultMaskOptions","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","integerLimit","allowNegative","allowLeadingZeroes","CurrencyInput","maskOptions","inputProps","currencyMask","createNumberMask","mask","defaultProps","inputMode","incomeSources","expenseSources","InputRow","props","onChange","bind","event","this","handleChange","type","sourceName","Form","Row","className","Col","xs","Label","InputGroup","Prepend","Text","value","amount","Control","as","interval","React","Component","App","initValue","income","expenses","forEach","source","state","stateInstance","target","setState","Container","span","offset","id","map","stateObject","annualIncome","annualExpenses","incomeSource","Number","expenseSource","calculateSavings","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ca25dd6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport MaskedInput from 'react-text-mask'\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\r\n\r\nconst defaultMaskOptions = {\r\n  prefix: '',\r\n  suffix: '',\r\n  includeThousandsSeparator: false,\r\n  thousandsSeparatorSymbol: ',',\r\n  allowDecimal: true,\r\n  decimalSymbol: '.',\r\n  decimalLimit: 2, // how many digits allowed after the decimal\r\n  integerLimit: 7, // limit length of integer numbers\r\n  allowNegative: false,\r\n  allowLeadingZeroes: false,\r\n}\r\n\r\nconst CurrencyInput = ({ maskOptions, ...inputProps }) => {\r\n  const currencyMask = createNumberMask({\r\n    ...defaultMaskOptions,\r\n    ...maskOptions,\r\n  })\r\n\r\n  return <MaskedInput mask={currencyMask} {...inputProps} />\r\n}\r\n\r\nCurrencyInput.defaultProps = {\r\n  inputMode: 'numeric',\r\n  maskOptions: {},\r\n}\r\n\r\nCurrencyInput.propTypes = {\r\n  inputmode: PropTypes.string,\r\n  maskOptions: PropTypes.shape({\r\n    prefix: PropTypes.string,\r\n    suffix: PropTypes.string,\r\n    includeThousandsSeparator: PropTypes.bool,\r\n    thousandsSeparatorSymbol: PropTypes.string,\r\n    allowDecimal: PropTypes.bool,\r\n    decimalSymbol: PropTypes.string,\r\n    decimalLimit: PropTypes.string,\r\n    requireDecimal: PropTypes.bool,\r\n    allowNegative: PropTypes.bool,\r\n    allowLeadingZeroes: PropTypes.bool,\r\n    integerLimit: PropTypes.number,\r\n  }),\r\n}\r\n\r\nexport default CurrencyInput","import React from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport CurrencyInput from './CurrencyInput';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './App.css';\n\nconst incomeSources = [\"allowance\", \"job\", \"others\"];\nconst expenseSources = [\"school\", \"travel\", \"others\"];\n\nclass InputRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    this.props.handleChange(event, this.props.type, this.props.sourceName);\n  }\n  \n  render() {\n    return (\n      <Form.Row className=\"mb-1\">\n        <Col xs={2} className=\"text-left\">\n          <Form.Label>{this.props.sourceName}</Form.Label>\n        </Col>\n        <Col xs={6}>  \n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>$</InputGroup.Text>\n            </InputGroup.Prepend>\n            <CurrencyInput type=\"text\" className=\"form-control\" onChange={this.onChange} value={this.props.value.amount} />\n          </InputGroup>\n        </Col>\n        <Col xs={4}>\n          <InputGroup>\n            <Form.Control as=\"select\" onChange={this.onChange} value={this.props.value.interval} >\n              <option>Daily</option>\n              <option>Weekly</option>\n              <option>Monthly</option>\n              <option>Yearly</option>\n            </Form.Control>\n          </InputGroup>\n        </Col>        \n      </Form.Row>\n    )\n  }\n}\n\nconst calculateSavings = stateObject => {\n  const income = stateObject.income;\n  const expenses = stateObject.expenses;\n  let annualIncome = 0;\n  let annualExpenses = 0;\n\n\n  for (const source in income) {\n    let incomeSource = income[source];\n\n    switch (incomeSource.interval) {\n      case \"Daily\":\n        annualIncome += Number(incomeSource.amount) * 365;\n        break;\n      case \"Weekly\":\n        annualIncome += Number(incomeSource.amount) * 52;\n        break;\n      case \"Monthly\":\n        annualIncome += Number(incomeSource.amount) * 12;\n        break;\n      default:\n        annualIncome += Number(incomeSource.amount);\n    }\n  }\n\n  for (const source in expenses) {\n    let expenseSource = expenses[source];\n\n    switch (expenseSource.interval) {\n      case \"Daily\":\n        annualExpenses += Number(expenseSource.amount) * 365;\n        break;\n      case \"Weekly\":\n        annualExpenses += Number(expenseSource.amount) * 52;\n        break;\n      case \"Monthly\":\n        annualExpenses += Number(expenseSource.amount) * 12;\n        break;\n      default:\n        annualExpenses += Number(expenseSource.amount);\n    }\n  }\n\n  return annualIncome - annualExpenses;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let initValue = {\n      income: {},\n      expenses: {}\n    }\n\n    incomeSources.forEach(source => {\n      initValue.income[source] = {\n        amount: \"0.00\",\n        interval: \"Weekly\"\n      }\n    })\n\n    expenseSources.forEach(source => {\n      initValue.expenses[source] = {\n        amount: \"0.00\",\n        interval: \"Weekly\"\n      }\n    })\n\n    this.state = initValue;\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event, type, sourceName) {\n    let stateInstance = this.state;\n    let target = (event.target.type === \"text\" ? \"amount\" : \"interval\")\n\n    stateInstance[type][sourceName][target] = event.target.value\n\n    this.setState(stateInstance);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Student Budget Calculator</h2>\n          <Container className=\"my-3\">\n            <Col xs={{span: 8, offset: 2}} id=\"income\" className=\"p-4\">\n              <h3>Income</h3>\n              {incomeSources.map(sourceName => {\n                return (\n                  <InputRow handleChange={this.onChange} type=\"income\" sourceName={sourceName} value={this.state.income[sourceName]} />\n                )\n              })}\n            </Col>\n          </Container>\n          <Container className=\"my-3\">\n            <Col xs={{span: 8, offset: 2}} id=\"expenses\" className=\"p-4\">\n              <h3>Expenses</h3>\n              {expenseSources.map(sourceName => {\n                return (\n                  <InputRow handleChange={this.onChange} type=\"expenses\" sourceName={sourceName} value={this.state.expenses[sourceName]} />\n                )\n              })}\n            </Col>\n          </Container>\n          <Container className=\"my-3\">\n            <Col xs={{span: 8, offset: 2}} id=\"summary\" className=\"p-4\">\n              <h3>Annual savings</h3>\n              <p>You would save ${calculateSavings(this.state)} every year</p>\n            </Col>\n          </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}